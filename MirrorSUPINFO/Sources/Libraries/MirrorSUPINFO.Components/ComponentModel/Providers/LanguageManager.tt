<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ import namespace="EnvDTE" #>
<#@ output extension=".cs" #>
<#

    DTE env = GetVSEnvironment();
    var inputFilePath = Host.ResolvePath(@"..\..\") + @"Strings\fr-FR\Resources.resw";    
    var provider = new CSharpCodeProvider();

#>
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Windows.ApplicationModel.Resources;
using Windows.ApplicationModel.Resources.Core;
using Windows.Globalization;
using GalaSoft.MvvmLight;
using GalaSoft.MvvmLight.Messaging;
// ReSharper disable InconsistentNaming

namespace MirrorSUPINFO.Components.ComponentModel.Providers
{
    /// <summary>
    /// Provide resources for the languages
    /// </summary>
    public sealed class LanguageManager : ViewModelBase
    {
        #region Fields

        private static LanguageManager _languageManager = null;

        private readonly List<Language> _availableLanguages;
        private ResourceLoader _resourceLoader;

        #endregion

        #region Properties

<#
        foreach (string name in GetResourceKeys(inputFilePath)) 
        {
            var resourceName = name.Replace(" ", String.Empty).Replace("\r", String.Empty).Replace("\n", String.Empty).Replace(".Text", String.Empty).Replace(".Content", String.Empty).Replace(".FlowDirection", string.Empty);
            var propertyName = resourceName.Replace(".", "_");
#>
        /// <summary>
        /// Gets the corresponding string to <#= resourceName #>
        /// </summary>
        public string <#= provider.CreateEscapedIdentifier(propertyName) #> => _resourceLoader.GetString("<#= resourceName #>");

<#
        }
#>
        #endregion

        #region Events

        internal event EventHandler<EventArgs> LanguageChanged;

        #endregion

        #region Constructors
        
        /// <summary>
        /// Initialize a new instance of <see cref="LanguageManager"/>
        /// </summary>
        public LanguageManager()
        {
            _availableLanguages = ApplicationLanguages.ManifestLanguages.Select(tag => new Language(tag)).ToList();

            if (ApplicationLanguages.PrimaryLanguageOverride == string.Empty)
            {
                SetCurrentLanguage(_availableLanguages[0]);
            }

            _resourceLoader = ResourceLoader.GetForViewIndependentUse("MirrorSUPINFO.Components/Resources");

			RegisterMessages();
        }

        #endregion

        #region Methods

        private void RegisterMessages()
        {
            Messenger.Default.Register<NotificationMessage>(this, (notification) =>
            {
				if (notification.Target.ToString() == "ChangeMirrorLanguage")
				{
				    SetCurrentLanguage(GetLanguageFromTag(notification.Notification));
				}
            });
        }
        
        /// <summary>
        /// Get an instance of <see cref="LanguageManager"/>
        /// </summary>
        internal static LanguageManager GetProvider()
        {
            return _languageManager ?? (_languageManager = new LanguageManager());
        }
        
        /// <summary>
        /// Update the current language and update the UI
        /// </summary>
        /// <param name="language">The new current language</param>
        internal void SetCurrentLanguage(Language language)
        {
            if (language == null)
            {
                throw new ArgumentNullException(nameof(language));
            }

            ApplicationLanguages.PrimaryLanguageOverride = language.LanguageTag;
            ResourceContext.GetForViewIndependentUse().Reset();

            new System.Threading.ManualResetEvent(false).WaitOne(100);

            _resourceLoader = ResourceLoader.GetForViewIndependentUse("MirrorSUPINFO.Components/Resources");

            foreach (var propertyInfo in GetType().GetProperties())
            {
                RaisePropertyChanged(propertyInfo.Name);
            }

            if (LanguageChanged != null)
            {
                LanguageChanged(this, new EventArgs());
            }
        }

        /// <summary>
        /// Get a <see cref="Language"/> from a display name
        /// </summary>
        /// <param name="displayName">The language's display name</param>
        /// <returns>Returns a <see cref="Language"/> corresponding to the display name</returns>
        internal Language GetLanguageFromDisplayName(string displayName)
        {
            var language = _availableLanguages.FirstOrDefault(lang => lang.DisplayName.ToLower() == displayName.ToLower());

            if (language == null)
            {
                throw new ArgumentException($"Failed to get language for {displayName}");
            }

            return language;
        }

        /// <summary>
        /// Get a <see cref="Language"/> from a tag
        /// </summary>
        /// <param name="tag">The language's tag</param>
        /// <returns>Returns a <see cref="Language"/> corresponding to the tag</returns>
        internal Language GetLanguageFromTag(string tag)
        {
            var language = _availableLanguages.FirstOrDefault(lang => lang.LanguageTag.ToLower() == tag.ToLower());

            if (language == null)
            {
                throw new ArgumentException($"Failed to get language for {tag}");
            }

            return language;
        }

        /// <summary>
        /// Get the current <see cref="Language"/>
        /// </summary>
        /// <returns>Returns a <see cref="Language"/> corresponding to the current language</returns>
        internal Language GetCurrentLanguage()
        {
            return GetLanguageFromTag(ApplicationLanguages.PrimaryLanguageOverride);
        }

        #endregion
    }
}
<#+

    private DTE GetVSEnvironment() {
        DTE env = null;
        var provider = Host as IServiceProvider;
        if (provider != null) {
            env = provider.GetService(typeof(DTE)) as DTE;
        }
        
        if (env == null) {
            throw new InvalidOperationException("Template must be executed from Visual Studio");
        }
        
        return env;
    }

    private static IEnumerable<XAttribute> GetResourceKeys(string filePath) {
        System.Xml.Linq.XElement resXml = System.Xml.Linq.XElement.Load(filePath);
        return (from dataElements in resXml.Descendants("data") select dataElements.FirstAttribute);
    }

#>