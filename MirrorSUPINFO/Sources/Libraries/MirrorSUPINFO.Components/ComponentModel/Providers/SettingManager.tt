<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#

    var settingsDefinitions = new List<Setting>()
    {
        new Setting() { Name = "FirstRun"				, Type = typeof(bool)     , DefaultValue = "true" },
        new Setting() { Name = "VoiceCommandPrefixMode"	, Type = typeof(int)      , DefaultValue = "1" },
        new Setting() { Name = "SpeechSynthesisGender"	, Type = typeof(string)   , DefaultValue = "Male" },
        new Setting() { Name = "UserGender"				, Type = typeof(string)   , DefaultValue = "Male" },
        new Setting() { Name = "NetworkSsid"			, Type = typeof(string)   , DefaultValue = "" },
        new Setting() { Name = "NetworkPassword"		, Type = typeof(string)   , DefaultValue = "" }
    };

#>
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using Windows.Storage;
using GalaSoft.MvvmLight;
// ReSharper disable InconsistentNaming

namespace MirrorSUPINFO.Components.ComponentModel.Providers
{
    /// <summary>
    /// Provide access to the application's settings
    /// </summary>
    public sealed class SettingManager : ViewModelBase 
    {
        #region Fields

        private static SettingManager _settingManager = null;

        private readonly ApplicationDataContainer _localSettings = ApplicationData.Current.LocalSettings;

        #endregion
        
        #region Properties
<#
            foreach (var setting in settingsDefinitions)
            { 
#>    
        /// <summary>
        /// Gets the value of <#= setting.Name #>
        /// </summary>
        public <#= setting.Type.FullName #> <#= setting.Name #>
        {
            get 
            {
                return (<#= setting.Type.FullName #>)_localSettings.Values["<#= setting.Name #>"];
            }
            set
            {
                _localSettings.Values["<#= setting.Name #>"] = value;
                RaisePropertyChanged();
            }
        }
<#
            } 
#>

        #endregion

        #region Constructors
        
        /// <summary>
        /// Initialize a new instance of <see cref="SettingManager"/>
        /// </summary>
        public SettingManager()
        {<#
            foreach (var setting in settingsDefinitions)
            { 
#> 
            if (!_localSettings.Values.ContainsKey("<#= setting.Name #>"))
            {<#
                if (setting.Type == typeof(string))
                { 
#> 
                _localSettings.Values.Add("<#= setting.Name #>", "<#= setting.DefaultValue #>");
<#              }
                else
                { 
#>  
                _localSettings.Values.Add("<#= setting.Name #>", <#= setting.DefaultValue #>);
<#
                }
#>
            }
<#
            } 
#>
        }

        #endregion

        #region Methods
            
        /// <summary>
        /// Get an instance of <see cref="SettingManager"/>
        /// </summary>
        internal static SettingManager GetProvider()
        {
            return _settingManager ?? (_settingManager = new SettingManager());
        }

        #endregion
    }
}

<#+

public class Setting
{
    public string Name { get; set; }
    public Type Type { get; set; }
    public string DefaultValue { get; set; }
}

#>